{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documenta\u00e7\u00e3o da API word analyzer Introdu\u00e7\u00e3o A API word_analyzer oferece duas rotas para opera\u00e7\u00f5es simples em palavras dentro de um array: contar vogais em cada palavra e ordenar as palavras. Certifique-se de que a API word_analyzer est\u00e1 em execu\u00e7\u00e3o no endere\u00e7o https://agile-shore-49592-142c0eafee41.herokuapp.com/api/ para poder realizar as requisi\u00e7\u00f5es. Rota 1: Contagem de Vogais Esta rota permite contar as vogais em cada palavra de um array. M\u00e9todo : POST URL : https://agile-shore-49592-142c0eafee41.herokuapp.com/api/vowel_count/ Exemplo de Requisi\u00e7\u00e3o : { \"words\": [\"batman\", \"robin\", \"coringa\"] } Exemplo de Resposta : { \"batman\": 2, \"robin\": 2, \"coringa\": 3 } Para contar as vogais em cada palavra fornecida no array words , envie uma requisi\u00e7\u00e3o POST para a URL especificada. O corpo da requisi\u00e7\u00e3o deve conter um objeto JSON com a chave words contendo um array de strings. Rota 2: Ordena\u00e7\u00e3o de Palavras Esta rota permite ordenar as palavras em um array, com a op\u00e7\u00e3o de ordena\u00e7\u00e3o reversa. M\u00e9todo : POST URL : https://agile-shore-49592-142c0eafee41.herokuapp.com/api/sort/ Exemplo de Requisi\u00e7\u00e3o para Ordena\u00e7\u00e3o Crescente : { \"words\": [\"batman\", \"robin\", \"coringa\"], \"order\": \"asc\" } Exemplo de Resposta para Ordena\u00e7\u00e3o Crescente : [ \"batman\", \"coringa\", \"robin\" ] Requisi\u00e7\u00e3o para Ordena\u00e7\u00e3o Decrescente : { \"words\": [\"batman\", \"robin\", \"coringa\"], \"order\": \"desc\" } Exemplo de Resposta para Ordena\u00e7\u00e3o Decrescente : [ \"robin\", \"coringa\", \"batman\" ] Para ordenar as palavras fornecidas no array words , envie uma requisi\u00e7\u00e3o POST para a URL especificada. O corpo da requisi\u00e7\u00e3o deve conter um objeto JSON com as chaves words (array de strings) e order (string com valor asc para ordem crescente ou desc para ordem decrescente). Exemplos de Uso Exemplo Completo de Uso das Rotas Aqui est\u00e3o exemplos completos de como usar as duas rotas da API word_analyzer : Contagem de Vogais: curl -X POST \"https://agile-shore-49592-142c0eafee41.herokuapp.com/api/vowel_count/\" -H \"Content-Type: application/json\" -d '{ \"words\": [\"batman\", \"robin\", \"coringa\"]}' Resposta Esperada: { \"batman\": 2, \"robin\": 2, \"coringa\": 3 } Ordena\u00e7\u00e3o de Palavras: Ordena\u00e7\u00e3o Crescente: curl -X POST \"https://agile-shore-49592-142c0eafee41.herokuapp.com/api/sort/\" -H \"Content-Type: application/json\" -d \"{\\\"words\\\": [\\\"batman\\\", \\\"robin\\\", \\\"coringa\\\"], \\\"order\\\": \\\"asc\\\"}\" Resposta Esperada: [ \"batman\", \"coringa\", \"robin\" ] Ordena\u00e7\u00e3o Decrescente: curl -X POST \"https://agile-shore-49592-142c0eafee41.herokuapp.com/api/sort/\" -H \"Content-Type: application/json\" -d \"{\\\"words\\\": [\\\"batman\\\", \\\"robin\\\", \\\"coringa\\\"], \\\"order\\\": \\\"desc\\\"}\" Resposta Esperada: [ \"robin\", \"coringa\", \"batman\" ] Esta documenta\u00e7\u00e3o fornece uma vis\u00e3o abrangente de como utilizar as duas rotas da API word_analyzer para contar vogais em palavras e ordenar palavras em um array. Certifique-se de adaptar os exemplos e os comandos CURL conforme necess\u00e1rio para o ambiente espec\u00edfico em que voc\u00ea est\u00e1 trabalhando.","title":"Exemplo"},{"location":"#documentacao-da-api-word-analyzer","text":"","title":"Documenta\u00e7\u00e3o da API word analyzer"},{"location":"#introducao","text":"A API word_analyzer oferece duas rotas para opera\u00e7\u00f5es simples em palavras dentro de um array: contar vogais em cada palavra e ordenar as palavras. Certifique-se de que a API word_analyzer est\u00e1 em execu\u00e7\u00e3o no endere\u00e7o https://agile-shore-49592-142c0eafee41.herokuapp.com/api/ para poder realizar as requisi\u00e7\u00f5es.","title":"Introdu\u00e7\u00e3o"},{"location":"#rota-1-contagem-de-vogais","text":"Esta rota permite contar as vogais em cada palavra de um array. M\u00e9todo : POST URL : https://agile-shore-49592-142c0eafee41.herokuapp.com/api/vowel_count/ Exemplo de Requisi\u00e7\u00e3o : { \"words\": [\"batman\", \"robin\", \"coringa\"] } Exemplo de Resposta : { \"batman\": 2, \"robin\": 2, \"coringa\": 3 } Para contar as vogais em cada palavra fornecida no array words , envie uma requisi\u00e7\u00e3o POST para a URL especificada. O corpo da requisi\u00e7\u00e3o deve conter um objeto JSON com a chave words contendo um array de strings.","title":"Rota 1: Contagem de Vogais"},{"location":"#rota-2-ordenacao-de-palavras","text":"Esta rota permite ordenar as palavras em um array, com a op\u00e7\u00e3o de ordena\u00e7\u00e3o reversa. M\u00e9todo : POST URL : https://agile-shore-49592-142c0eafee41.herokuapp.com/api/sort/ Exemplo de Requisi\u00e7\u00e3o para Ordena\u00e7\u00e3o Crescente : { \"words\": [\"batman\", \"robin\", \"coringa\"], \"order\": \"asc\" } Exemplo de Resposta para Ordena\u00e7\u00e3o Crescente : [ \"batman\", \"coringa\", \"robin\" ] Requisi\u00e7\u00e3o para Ordena\u00e7\u00e3o Decrescente : { \"words\": [\"batman\", \"robin\", \"coringa\"], \"order\": \"desc\" } Exemplo de Resposta para Ordena\u00e7\u00e3o Decrescente : [ \"robin\", \"coringa\", \"batman\" ] Para ordenar as palavras fornecidas no array words , envie uma requisi\u00e7\u00e3o POST para a URL especificada. O corpo da requisi\u00e7\u00e3o deve conter um objeto JSON com as chaves words (array de strings) e order (string com valor asc para ordem crescente ou desc para ordem decrescente).","title":"Rota 2: Ordena\u00e7\u00e3o de Palavras"},{"location":"#exemplos-de-uso","text":"Exemplo Completo de Uso das Rotas Aqui est\u00e3o exemplos completos de como usar as duas rotas da API word_analyzer : Contagem de Vogais: curl -X POST \"https://agile-shore-49592-142c0eafee41.herokuapp.com/api/vowel_count/\" -H \"Content-Type: application/json\" -d '{ \"words\": [\"batman\", \"robin\", \"coringa\"]}' Resposta Esperada: { \"batman\": 2, \"robin\": 2, \"coringa\": 3 } Ordena\u00e7\u00e3o de Palavras: Ordena\u00e7\u00e3o Crescente: curl -X POST \"https://agile-shore-49592-142c0eafee41.herokuapp.com/api/sort/\" -H \"Content-Type: application/json\" -d \"{\\\"words\\\": [\\\"batman\\\", \\\"robin\\\", \\\"coringa\\\"], \\\"order\\\": \\\"asc\\\"}\" Resposta Esperada: [ \"batman\", \"coringa\", \"robin\" ] Ordena\u00e7\u00e3o Decrescente: curl -X POST \"https://agile-shore-49592-142c0eafee41.herokuapp.com/api/sort/\" -H \"Content-Type: application/json\" -d \"{\\\"words\\\": [\\\"batman\\\", \\\"robin\\\", \\\"coringa\\\"], \\\"order\\\": \\\"desc\\\"}\" Resposta Esperada: [ \"robin\", \"coringa\", \"batman\" ] Esta documenta\u00e7\u00e3o fornece uma vis\u00e3o abrangente de como utilizar as duas rotas da API word_analyzer para contar vogais em palavras e ordenar palavras em um array. Certifique-se de adaptar os exemplos e os comandos CURL conforme necess\u00e1rio para o ambiente espec\u00edfico em que voc\u00ea est\u00e1 trabalhando.","title":"Exemplos de Uso"},{"location":"code/docs_serializer/","text":"Serializers da API Word Analyzer Aqui est\u00e3o os serializers da API Word Analyzer que definem como os dados s\u00e3o validados e processados para contagem de vogais e ordena\u00e7\u00e3o de palavras. Serializador para Contagem Class VowelCountRequestSerializer para contar vogais em uma lista de palavras. from rest_framework import serializers class VowelCountRequestSerializer(serializers.Serializer): words = serializers.ListField( child=serializers.CharField() ) Descri\u00e7\u00e3o: A classe VowelCountRequestSerializer no Django REST Framework valida uma entrada que consiste em uma lista de palavras, onde cada palavra \u00e9 representada como uma string ( serializers.CharField() ) na vari\u00e1vel words . Este serializador garante que os dados recebidos estejam formatados corretamente para opera\u00e7\u00f5es subsequentes, como a contagem de vogais, assegurando a consist\u00eancia e integridade dos dados manipulados pela API. Atributos: words (list): Lista de palavras a serem analisadas para contagem de vogais. Serializador para ordenar Class SortRequestSerializer para ordenar uma lista de palavras. from rest_framework import serializers class SortRequestSerializer(serializers.Serializer): words = serializers.ListField( child=serializers.CharField() ) order = serializers.ChoiceField( choices=['asc', 'desc'] ) Descri\u00e7\u00e3o: A classe SortRequestSerializer no Django REST Framework valida uma entrada que inclui uma lista de palavras, onde cada palavra \u00e9 representada como uma string ( serializers.ListField(child=serializers.CharField()) ) na vari\u00e1vel words . Al\u00e9m disso, a classe valida uma op\u00e7\u00e3o de ordena\u00e7\u00e3o na vari\u00e1vel order ( serializers.ChoiceField(choices=['asc', 'desc']) ), permitindo especificar se a ordena\u00e7\u00e3o deve ser ascendente ( asc ) ou descendente ( desc ). Esses validadores garantem que os dados recebidos estejam no formato adequado para realizar opera\u00e7\u00f5es de ordena\u00e7\u00e3o dentro da API, mantendo a integridade e a consist\u00eancia dos dados manipulados. Atributos: words (list): Lista de palavras a serem ordenadas. order (str): Ordem de ordena\u00e7\u00e3o, asc para crescente e desc para decrescente. Estes serializadores s\u00e3o utilizados para validar e processar dados nas opera\u00e7\u00f5es de contagem de vogais e ordena\u00e7\u00e3o de palavras na API Word Analyzer do Django REST Framework. Eles garantem que os dados recebidos estejam no formato esperado antes de serem processados pelas fun\u00e7\u00f5es correspondentes da API.","title":"Serializers"},{"location":"code/docs_serializer/#serializers-da-api-word-analyzer","text":"Aqui est\u00e3o os serializers da API Word Analyzer que definem como os dados s\u00e3o validados e processados para contagem de vogais e ordena\u00e7\u00e3o de palavras.","title":"Serializers da API Word Analyzer"},{"location":"code/docs_serializer/#serializador-para-contagem","text":"Class VowelCountRequestSerializer para contar vogais em uma lista de palavras. from rest_framework import serializers class VowelCountRequestSerializer(serializers.Serializer): words = serializers.ListField( child=serializers.CharField() ) Descri\u00e7\u00e3o: A classe VowelCountRequestSerializer no Django REST Framework valida uma entrada que consiste em uma lista de palavras, onde cada palavra \u00e9 representada como uma string ( serializers.CharField() ) na vari\u00e1vel words . Este serializador garante que os dados recebidos estejam formatados corretamente para opera\u00e7\u00f5es subsequentes, como a contagem de vogais, assegurando a consist\u00eancia e integridade dos dados manipulados pela API. Atributos: words (list): Lista de palavras a serem analisadas para contagem de vogais.","title":"Serializador para Contagem"},{"location":"code/docs_serializer/#serializador-para-ordenar","text":"Class SortRequestSerializer para ordenar uma lista de palavras. from rest_framework import serializers class SortRequestSerializer(serializers.Serializer): words = serializers.ListField( child=serializers.CharField() ) order = serializers.ChoiceField( choices=['asc', 'desc'] ) Descri\u00e7\u00e3o: A classe SortRequestSerializer no Django REST Framework valida uma entrada que inclui uma lista de palavras, onde cada palavra \u00e9 representada como uma string ( serializers.ListField(child=serializers.CharField()) ) na vari\u00e1vel words . Al\u00e9m disso, a classe valida uma op\u00e7\u00e3o de ordena\u00e7\u00e3o na vari\u00e1vel order ( serializers.ChoiceField(choices=['asc', 'desc']) ), permitindo especificar se a ordena\u00e7\u00e3o deve ser ascendente ( asc ) ou descendente ( desc ). Esses validadores garantem que os dados recebidos estejam no formato adequado para realizar opera\u00e7\u00f5es de ordena\u00e7\u00e3o dentro da API, mantendo a integridade e a consist\u00eancia dos dados manipulados. Atributos: words (list): Lista de palavras a serem ordenadas. order (str): Ordem de ordena\u00e7\u00e3o, asc para crescente e desc para decrescente. Estes serializadores s\u00e3o utilizados para validar e processar dados nas opera\u00e7\u00f5es de contagem de vogais e ordena\u00e7\u00e3o de palavras na API Word Analyzer do Django REST Framework. Eles garantem que os dados recebidos estejam no formato esperado antes de serem processados pelas fun\u00e7\u00f5es correspondentes da API.","title":"Serializador para ordenar"},{"location":"code/docs_urls/","text":"Configura\u00e7\u00e3o de URLs no Django Aqui est\u00e3o as configura\u00e7\u00f5es das URLs no Django para os endpoints da API Word Analyzer. Configura\u00e7\u00e3o das URLs As URLs abaixo mapeiam os endpoints da API para suas respectivas views: from django.urls import path from .views import VowelCountView, SortView urlpatterns = [ path('vowel_count/', VowelCountView.as_view(), name='vowel-count'), path('sort/', SortView.as_view(), name='sort-words'), ] /vowel_count/ Descri\u00e7\u00e3o: Endpoint para contar vogais em uma lista de palavras. M\u00e9todo HTTP: POST View associada: VowelCountView Nome da URL: vowel-count /sort/ Descri\u00e7\u00e3o: Endpoint para ordenar uma lista de palavras. M\u00e9todo HTTP: POST View associada: SortView Nome da URL: sort-words Descri\u00e7\u00e3o Estas URLs configuram os endpoints da API Word Analyzer no Django, permitindo que os usu\u00e1rios enviem requisi\u00e7\u00f5es para contar vogais em listas de palavras e para ordenar listas de palavras. Cada endpoint est\u00e1 associado \u00e0 sua respectiva view (VowelCountView e SortView), garantindo que as requisi\u00e7\u00f5es sejam processadas corretamente de acordo com as opera\u00e7\u00f5es especificadas. Este documento fornece uma descri\u00e7\u00e3o detalhada das configura\u00e7\u00f5es de URLs para a API Word Analyzer no Django, facilitando a compreens\u00e3o e o uso por parte dos desenvolvedores que interagem com esses endpoints.","title":"Urls"},{"location":"code/docs_urls/#configuracao-de-urls-no-django","text":"Aqui est\u00e3o as configura\u00e7\u00f5es das URLs no Django para os endpoints da API Word Analyzer.","title":"Configura\u00e7\u00e3o de URLs no Django"},{"location":"code/docs_urls/#configuracao-das-urls","text":"As URLs abaixo mapeiam os endpoints da API para suas respectivas views: from django.urls import path from .views import VowelCountView, SortView urlpatterns = [ path('vowel_count/', VowelCountView.as_view(), name='vowel-count'), path('sort/', SortView.as_view(), name='sort-words'), ] /vowel_count/ Descri\u00e7\u00e3o: Endpoint para contar vogais em uma lista de palavras. M\u00e9todo HTTP: POST View associada: VowelCountView Nome da URL: vowel-count /sort/ Descri\u00e7\u00e3o: Endpoint para ordenar uma lista de palavras. M\u00e9todo HTTP: POST View associada: SortView Nome da URL: sort-words Descri\u00e7\u00e3o Estas URLs configuram os endpoints da API Word Analyzer no Django, permitindo que os usu\u00e1rios enviem requisi\u00e7\u00f5es para contar vogais em listas de palavras e para ordenar listas de palavras. Cada endpoint est\u00e1 associado \u00e0 sua respectiva view (VowelCountView e SortView), garantindo que as requisi\u00e7\u00f5es sejam processadas corretamente de acordo com as opera\u00e7\u00f5es especificadas. Este documento fornece uma descri\u00e7\u00e3o detalhada das configura\u00e7\u00f5es de URLs para a API Word Analyzer no Django, facilitando a compreens\u00e3o e o uso por parte dos desenvolvedores que interagem com esses endpoints.","title":"Configura\u00e7\u00e3o das URLs"},{"location":"code/docs_utils/","text":"Fun\u00e7\u00f5es de Manipula\u00e7\u00e3o de Palavras Essas duas fun\u00e7\u00f5es ( sort_words , count_vowels ) da API Word Analyzer manipulam listas de palavras e contabilizam as vogais de cada palavra. Fun\u00e7\u00e3o para Contar A fun\u00e7\u00e3o count_vowels conta o n\u00famero de vogais em cada palavra de uma lista. def count_vowels(words): vowel_counts = { word: sum(1 for char in word if char in 'aeiouAEIOU') for word in words } return vowel_counts Descri\u00e7\u00e3o Essa fun\u00e7\u00e3o cria um dicion\u00e1rio vowel_counts onde as chaves s\u00e3o palavras ( word ) de uma lista ( words ), e os valores correspondentes s\u00e3o o n\u00famero de vogais encontradas em cada palavra. Argumentos: Recebe uma lista de palavras na vari\u00e1vel words . Resposta: Retorna o dicion\u00e1rio vowel_counts com as chaves e os valores. Fun\u00e7\u00e3o para Ordenar A fun\u00e7\u00e3o sort_words ordena uma lista de palavras em ordem crescente ou decrescente. def sort_words(words, order): return sorted(words, reverse=(order == 'desc')) Descri\u00e7\u00e3o Esta fun\u00e7\u00e3o utiliza a fun\u00e7\u00e3o sorted do Python para ordenar a lista de palavras ( words ). A ordem da ordena\u00e7\u00e3o \u00e9 determinada pelo argumento order, onde asc indica ordem crescente e desc indica ordem decrescente. Argumentos: words (list): Lista de palavras a serem ordenadas. order (str): Indica a ordem de ordena\u00e7\u00e3o, podendo ser asc para crescente ou desc para decrescente. Resposta: Retorna a lista words ordenada de acordo com a ordem especificada em order . Este documento oferece uma descri\u00e7\u00e3o concisa e informativa das fun\u00e7\u00f5es count_vowels e sort_words , facilitando o entendimento de suas funcionalidades e modos de uso.","title":"Utils"},{"location":"code/docs_utils/#funcoes-de-manipulacao-de-palavras","text":"Essas duas fun\u00e7\u00f5es ( sort_words , count_vowels ) da API Word Analyzer manipulam listas de palavras e contabilizam as vogais de cada palavra.","title":"Fun\u00e7\u00f5es de Manipula\u00e7\u00e3o de Palavras"},{"location":"code/docs_utils/#funcao-para-contar","text":"A fun\u00e7\u00e3o count_vowels conta o n\u00famero de vogais em cada palavra de uma lista. def count_vowels(words): vowel_counts = { word: sum(1 for char in word if char in 'aeiouAEIOU') for word in words } return vowel_counts Descri\u00e7\u00e3o Essa fun\u00e7\u00e3o cria um dicion\u00e1rio vowel_counts onde as chaves s\u00e3o palavras ( word ) de uma lista ( words ), e os valores correspondentes s\u00e3o o n\u00famero de vogais encontradas em cada palavra. Argumentos: Recebe uma lista de palavras na vari\u00e1vel words . Resposta: Retorna o dicion\u00e1rio vowel_counts com as chaves e os valores.","title":"Fun\u00e7\u00e3o para Contar"},{"location":"code/docs_utils/#funcao-para-ordenar","text":"A fun\u00e7\u00e3o sort_words ordena uma lista de palavras em ordem crescente ou decrescente. def sort_words(words, order): return sorted(words, reverse=(order == 'desc')) Descri\u00e7\u00e3o Esta fun\u00e7\u00e3o utiliza a fun\u00e7\u00e3o sorted do Python para ordenar a lista de palavras ( words ). A ordem da ordena\u00e7\u00e3o \u00e9 determinada pelo argumento order, onde asc indica ordem crescente e desc indica ordem decrescente. Argumentos: words (list): Lista de palavras a serem ordenadas. order (str): Indica a ordem de ordena\u00e7\u00e3o, podendo ser asc para crescente ou desc para decrescente. Resposta: Retorna a lista words ordenada de acordo com a ordem especificada em order . Este documento oferece uma descri\u00e7\u00e3o concisa e informativa das fun\u00e7\u00f5es count_vowels e sort_words , facilitando o entendimento de suas funcionalidades e modos de uso.","title":"Fun\u00e7\u00e3o para Ordenar"},{"location":"code/docs_view/","text":"Detalhamento das Views da API Neste documento, vamos detalhar as classes de view da API word_analyzer utilizando o framework Django REST Framework. View para Contagem A classe VowelCountView \u00e9 respons\u00e1vel por contar as vogais em cada palavra de um array enviado na requisi\u00e7\u00e3o POST. M\u00e9todo post from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from .serializers import VowelCountRequestSerializer from .utils import count_vowels class VowelCountView(APIView): def post(self, request): serializer = VowelCountRequestSerializer(data=request.data) if serializer.is_valid(): words = serializer.validated_data['words'] vowel_counts = count_vowels(words) return Response(vowel_counts, status=status.HTTP_200_OK) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) Descri\u00e7\u00e3o Classe: VowelCountView herda de APIView . M\u00e9todo post : Recebe uma requisi\u00e7\u00e3o POST contendo um array de palavras. Serializa\u00e7\u00e3o: Utiliza o VowelCountRequestSerializer para validar e desserializar os dados recebidos. Contagem de Vogais: Chama a fun\u00e7\u00e3o count_vowels(words) para contar as vogais em cada palavra do array. Resposta: Retorna um objeto JSON com as contagens de vogais ou erros de valida\u00e7\u00e3o, com os respectivos c\u00f3digos de status HTTP. View para ordenar A classe SortView \u00e9 respons\u00e1vel por ordenar as palavras em um array conforme especificado na requisi\u00e7\u00e3o POST. M\u00e9todo post from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from .serializers import SortRequestSerializer from .utils import sort_words class SortView(APIView): def post(self, request): serializer = SortRequestSerializer(data=request.data) if serializer.is_valid(): words = serializer.validated_data['words'] order = serializer.validated_data['order'] sorted_words = sort_words(words, order) return Response(sorted_words, status=status.HTTP_200_OK) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) Descri\u00e7\u00e3o Classe: SortView herda de APIView . M\u00e9todo post : Recebe uma requisi\u00e7\u00e3o POST contendo um array de palavras e um par\u00e2metro de ordena\u00e7\u00e3o ( order ). Serializa\u00e7\u00e3o: Utiliza o SortRequestSerializer para validar e desserializar os dados recebidos. Ordena\u00e7\u00e3o de Palavras: Chama a fun\u00e7\u00e3o sort_words(words, order) para ordenar o array de palavras conforme especificado. Resposta: Retorna um objeto JSON com as palavras ordenadas ou erros de valida\u00e7\u00e3o, com os respectivos c\u00f3digos de status HTTP. Este documento detalha as classes VowelCountView e SortView da API word_analyzer , explicando como cada uma processa requisi\u00e7\u00f5es POST, utiliza serializadores para validar dados e chama fun\u00e7\u00f5es utilit\u00e1rias ( count_vowels e sort_words ) para realizar opera\u00e7\u00f5es espec\u00edficas.","title":"Views"},{"location":"code/docs_view/#detalhamento-das-views-da-api","text":"Neste documento, vamos detalhar as classes de view da API word_analyzer utilizando o framework Django REST Framework.","title":"Detalhamento das Views da API"},{"location":"code/docs_view/#view-para-contagem","text":"A classe VowelCountView \u00e9 respons\u00e1vel por contar as vogais em cada palavra de um array enviado na requisi\u00e7\u00e3o POST.","title":"View para Contagem"},{"location":"code/docs_view/#metodo-post","text":"from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from .serializers import VowelCountRequestSerializer from .utils import count_vowels class VowelCountView(APIView): def post(self, request): serializer = VowelCountRequestSerializer(data=request.data) if serializer.is_valid(): words = serializer.validated_data['words'] vowel_counts = count_vowels(words) return Response(vowel_counts, status=status.HTTP_200_OK) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) Descri\u00e7\u00e3o Classe: VowelCountView herda de APIView . M\u00e9todo post : Recebe uma requisi\u00e7\u00e3o POST contendo um array de palavras. Serializa\u00e7\u00e3o: Utiliza o VowelCountRequestSerializer para validar e desserializar os dados recebidos. Contagem de Vogais: Chama a fun\u00e7\u00e3o count_vowels(words) para contar as vogais em cada palavra do array. Resposta: Retorna um objeto JSON com as contagens de vogais ou erros de valida\u00e7\u00e3o, com os respectivos c\u00f3digos de status HTTP.","title":"M\u00e9todo post"},{"location":"code/docs_view/#view-para-ordenar","text":"A classe SortView \u00e9 respons\u00e1vel por ordenar as palavras em um array conforme especificado na requisi\u00e7\u00e3o POST.","title":"View para ordenar"},{"location":"code/docs_view/#metodo-post_1","text":"from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from .serializers import SortRequestSerializer from .utils import sort_words class SortView(APIView): def post(self, request): serializer = SortRequestSerializer(data=request.data) if serializer.is_valid(): words = serializer.validated_data['words'] order = serializer.validated_data['order'] sorted_words = sort_words(words, order) return Response(sorted_words, status=status.HTTP_200_OK) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) Descri\u00e7\u00e3o Classe: SortView herda de APIView . M\u00e9todo post : Recebe uma requisi\u00e7\u00e3o POST contendo um array de palavras e um par\u00e2metro de ordena\u00e7\u00e3o ( order ). Serializa\u00e7\u00e3o: Utiliza o SortRequestSerializer para validar e desserializar os dados recebidos. Ordena\u00e7\u00e3o de Palavras: Chama a fun\u00e7\u00e3o sort_words(words, order) para ordenar o array de palavras conforme especificado. Resposta: Retorna um objeto JSON com as palavras ordenadas ou erros de valida\u00e7\u00e3o, com os respectivos c\u00f3digos de status HTTP. Este documento detalha as classes VowelCountView e SortView da API word_analyzer , explicando como cada uma processa requisi\u00e7\u00f5es POST, utiliza serializadores para validar dados e chama fun\u00e7\u00f5es utilit\u00e1rias ( count_vowels e sort_words ) para realizar opera\u00e7\u00f5es espec\u00edficas.","title":"M\u00e9todo post"}]}